(aspect
    (global >>>GUEST>>>
        export let number_of_applys: i32 = 0;
        export let max_apply_depth: i32 = 0;
        let apply_stack: i32 = 0;

        export let number_of_calls: i32 = 0;
        export let max_call_depth: i32 = 0;
        let call_stack: i32 = 0;

        function max<T>(a: T, b: T): T {
            return a > b ? a : b;
        }
    <<<GUEST<<<)

    (advice call pre (f FunctionIndex) >>>GUEST>>>
        /* [1] */
        call_stack += 1;
        /* [2] */
        max_call_depth = max(max_call_depth, call_stack);
        /* [3] */
        number_of_calls += 1;
    <<<GUEST<<<)

    (advice call post (f FunctionIndex) >>>GUEST>>>
        call_stack -= 1;
    <<<GUEST<<<)


    (advice apply (func    WasmFunction)
                  (args    MutDynArgs)
                  (results MutDynResults) >>>GUEST>>>
        // Before apply:
        // [1] Increment apply stack size
        // [2] Ensure highest apply stack size is recorded
        // [3] Ensure apply count is incremented
        // After apply:
        // [4] Ensure apply count is decremented


        /* [1] */
        apply_stack += 1;
        /* [2] */
        max_apply_depth = max(max_apply_depth, apply_stack);
        /* [3] */
        number_of_applys += 1;
        func.apply();
        /* [4] */
        apply_stack -= 1;

    <<<GUEST<<<))
