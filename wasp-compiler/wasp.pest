// This definition allows for implicit whitespaces, a new line makes no difference
WHITESPACE = _{ " " | "\r" | "\n" | "\t" }

// This definition allows for implicit comments
COMMENT = _{ "#|" ~ (!"|#" ~ ANY)* ~ "|#" }

// Input grammar
wasp_input = { SOI ~ wasp ~ EOI }
wasp       = { "(" ~ "aspect" ~ ("(" ~ advice_definition ~ ")")* ~ ")" }

// Guest language block, currently hardcoded AssemblyScript
GUEST_BLOCK = { ">>>GUEST>>>" ~ (!"<<<GUEST<<<" ~ ANY)* ~ "<<<GUEST<<<" }

// Advice definitions
advice_definition = { advice_global | advice_trap }
advice_global     = { "global" ~ GUEST_BLOCK }
advice_trap       = { "advice" ~ trap_signature }

// The definition of identifiers
identifier      = @{ ASCII_ALPHA+ }
type_identifier = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC+ }

// Advice traps
trap_signature = {
    trap_apply
  | trap_call
  | trap_call_indirect
  | trap_if_then
  | trap_if_then_else
  | trap_br_if /* | more | trap | targets | here | ... */
}

// TRAP APPLY
trap_apply           = { "apply" ~ apply_hook_signature ~ GUEST_BLOCK }
apply_hook_signature = { apply_gen | apply_spe_intro | apply_spe_inter }

// [ 🐌 / (🐇) ], [ 🔍 / 📝 ], [ 🙆‍ ]
apply_gen = { apply_formal_wasm_f ~ apply_formal_argument ~ apply_formal_result }
// [ 🐇 ], [ 🔍 ], [ 🪖 ]
apply_spe_intro = { apply_formal_wasm_f ~ "(" ~ apply_formal_argument+ ~ ")" ~ "(" ~ apply_formal_result+ ~ ")" }
// [ 🐇 ], [ 📝 ], [ 🪖 ]
apply_spe_inter = { apply_formal_wasm_f ~ "(" ~ "Mut" ~ apply_formal_argument+ ~ ")" ~ "(" ~ "Mut" ~ apply_formal_result+ ~ ")" }

apply_formal_wasm_f   = { "(" ~ identifier ~ "WasmFunction" ~ ")" }
apply_formal_argument = { typed_argument }
apply_formal_result   = { typed_argument }
typed_argument        = { "(" ~ identifier ~ type_identifier ~ ")" }

branch_formal_condition = { "(" ~ identifier ~ "Condition" ~ ")" }
branch_formal_label     = { "(" ~ identifier ~ "Label" ~ ")" }

call_qualifier = { "before" | "after" }

// TRAP CALL
trap_call     = { "call" ~ call_qualifier ~ formal_target ~ GUEST_BLOCK }
formal_target = { "(" ~ identifier ~ "FunctionIndex" ~ ")" }

// TRAP CALL_INDIRECT
trap_call_indirect = { "call_indirect" ~ call_qualifier ~ formal_table ~ formal_index ~ GUEST_BLOCK }
formal_table       = { "(" ~ identifier ~ "FunctionTable" ~ ")" }
formal_index       = { "(" ~ identifier ~ "FunctionTableIndex" ~ ")" }

// TRAP IF - [ 🐇 ], [ 📝 ], [ 🪖 ]
trap_if_then      = { "if_then" ~ branch_formal_condition ~ GUEST_BLOCK }
trap_if_then_else = { "if_then_else" ~ branch_formal_condition ~ GUEST_BLOCK }

// TRAP IF-BR - [ 🐇 ], [ 📝 ], [ 🪖 ]
trap_br_if = { "br_if" ~ branch_formal_condition ~ branch_formal_label ~ GUEST_BLOCK }
